@{
    ViewData["Title"] = "movies & structure";
}

<script src="~/scripts/build_v2.js"></script>

<div id="chartDiv">
</div>

<script>

/*
 * to filter the data after 2001 year
 */
function filterData(data)
{
    return data.filter(d => {
        return( 
            d.release_year > 2001 &&      // after 2001
            d.title
        );
    });
}

/*
 * prepare data for chart, reduce fields and
 * provide a key
 *
 * http://devdocs.io
 */
function prepareBarChartData(data) 
{
  // group the data by title
  const dataMap = d3.nest()

                        // grouped by is the key, can have multiple
                        .key(function(d){
                                    return d.title; 
                                })

                        // collate the values of the revenue here to one big number
                        // more useful when grouped by say genre
                        .rollup(function(leaves){
                                    return d3.sum(leaves, function(d){
                                        return d.revenue;
                                    }) //;
                                })

                        // the data to use
                        .entries(data)
                    ;

    // DEBUG
    console.log("dataMap", dataMap);

    //debugger;  // uncomment this line to effectively pause at this point (useful js debug line)

  return dataMap;
}

/*
 * convert fields in csv to js objects
 */
function csvConvert(d)
{
     return {
                id: +d.id,                          // + means convert to number
                title: d.title,                     // default, keep as string
                release_year: +d.release_year,      // year as number (not date in csv)
                genre: d.genre,
                runtime: +d.runtime,                // minutes as number
                budget: +d.budget,
                revenue: +d.revenue
            };
}

/*
 * once data is loaded, run a few tasks, like c++ main()
 */
function dataLoaded(loadedData)
{    
    console.log("pre filter: ", loadedData);
    var cleanData = filterData(loadedData);
    console.log("filtered: ", cleanData);

    // get data with just two columns (title, revenue)
    var barChartData = prepareBarChartData(cleanData);

    // now sort into descending order by revenue/value
    var sortedData = barChartData.sort(
                        function(a, b){ 
                            return d3.descending(
                                a["value"], 
                                b["value"]
                            ); 
                        }
                    );

    // DEBUG
    console.log("sortedData", sortedData);

    buildChart(
        sortedData, 
        "bar"
    );
}

/* CSV file */
        d3.csv("../data/harry_potter.csv", csvConvert)
          .then(result => {
              dataLoaded(result)     
          })
        ;


/* JSON file
        d3.json("../data/harry_potter.json", function (d){})
          .then(
              result => buildChart(
                            result, "bar"
                        )              
            );
*/

/* 
 * Multiple files or links, 
 * same fields required is idea, 
 * creates 2 arrays 
 
    const potter = d3.csv("../data/harry_potter.csv");
    const rings = d3.csv("../data/lord_of_the_rings.csv");

    Promise.all(
                [potter, rings]
            )
            .then( results =>
              console.log('Multiple requests: ', results);
              console.log('Multiple requests concat: ', [...results[0], ...results[1]]);           
            );
*/
    /*
     * get an element by the id #ID
     * then store in variable
     
    const svg = d3.select("#chartDiv")
                  .append("svg")
                  .attr("width", 500)
                  .attr("height", 400)
    ;*/

    //

</script>

<div>
    this uses a csv, smooths the data, also has json data in comments<br />
    - separate into csv data with conversion<br />
    - json data &amp; combining<br />
    - data filtering
</div>